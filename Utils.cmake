include(CMakeParseArguments)

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(PLATFORM_LINUX TRUE)
    set(PLATFORM_NAME Linux)
    set(PLATFORM_EXTENSION "Linux")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    set(PLATFORM_WINDOWS TRUE)
    set(PLATFORM_NAME Windows)
    set(PLATFORM_EXTENSION "Windows")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    set(PLATFORM_OSX TRUE)
    set(PLATFORM_NAME OSX)
    set(PLATFORM_EXTENSION "OSX")
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set up some sane defaults
set(PROJECT_CMAKE_DIR ${PROJECT_SOURCE_DIR}/cmake)
set(CMAKE_MODULE_PATH ${PROJECT_CMAKE_DIR})

if(NOT CMAKE_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/dist)
endif(NOT CMAKE_INSTALL_PREFIX)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif(NOT CMAKE_BUILD_TYPE)

if(NOT INSTALL_BIN_DIR)
    set(INSTALL_BIN_DIR bin)
endif()

if(NOT INSTALL_INCLUDE_DIR)
    set(INSTALL_INCLUDE_DIR include)
endif()

if(NOT INSTALL_LIB_DIR)
    set(INSTALL_LIB_DIR lib)
endif()

if(NOT INSTALL_STATIC_LIB_DIR)
    set(INSTALL_STATIC_LIB_DIR lib/static)
endif()

if(NOT INSTALL_CMAKE_DIR)
    set(INSTALL_CMAKE_DIR cmake)
endif()

foreach(p LIB BIN INCLUDE CMAKE)
    set(var INSTALL_${p}_DIR)
    if(NOT IS_ABSOLUTE "${${var}}")
        set(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
    endif()
endforeach()

if(MSVC)
    # Force to always compile with W4
    if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
    endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    # Update if necessary
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic")
endif()

include_directories("${PROJECT_SOURCE_DIR}/vendor/include")

if(PLATFORM_WINDOWS)
    link_directories("${PROJECT_SOURCE_DIR}/vendor/lib/win32")
    install(DIRECTORY "${PROJECT_SOURCE_DIR}/vendor/lib/win32/" DESTINATION "lib" FILES_MATCHING PATTERN "*.dll")
elseif(PLATFORM_LINUX)
    link_directories("${PROJECT_SOURCE_DIR}/vendor/lib/linux")
    install(DIRECTORY "${PROJECT_SOURCE_DIR}/vendor/lib/linux/" DESTINATION "lib" FILES_MATCHING PATTERN "*.so*")
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
elseif(PLATFORM_OSX)
    link_directories("${PROJECT_SOURCE_DIR}/vendor/lib/macosx")
    install(DIRECTORY "${PROJECT_SOURCE_DIR}/vendor/lib/macosx/" DESTINATION "lib" FILES_MATCHING PATTERN "*.dylib")
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
endif()

# Helper functions

macro(set_source_files VARIABLES_PREFIX)
    set(_MULTI_VALUE_ARGS SOURCES HEADERS GENERATED_HEADERS)
    cmake_parse_arguments(${VARIABLES_PREFIX} "" "" "${_MULTI_VALUE_ARGS}" ${ARGN})
    unset(_MULTI_VALUE_ARGS)

    if(${VARIABLES_PREFIX}_GENERATED_HEADERS)
        foreach(GENERATED_HEADER ${${VARIABLES_PREFIX}_GENERATED_HEADERS})
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${GENERATED_HEADER}.in ${CMAKE_CURRENT_BINARY_DIR}/${GENERATED_HEADER})
            list(APPEND ${VARIABLES_PREFIX}_HEADERS ${CMAKE_CURRENT_BINARY_DIR}/${GENERATED_HEADER})
        endforeach()
    endif()
endmacro()

function(create_module)
    set(_OPTIONS "")
    set(_ONE_VALUE_ARGS NAME PACKAGE COMPILATION_UNIT)
    set(_MULTI_VALUE_ARGS SOURCES HEADERS)
    cmake_parse_arguments(CREATE_MODULE "${_OPTIONS}" "${_ONE_VALUE_ARGS}" "${_MULTI_VALUE_ARGS}" ${ARGN})

    if(${CREATE_MODULE_COMPILATION_UNIT} STREQUAL "EXECUTABLE")
        add_executable(${CREATE_MODULE_NAME} ${CREATE_MODULE_SOURCES} ${CREATE_MODULE_HEADERS})
    elseif(${CREATE_MODULE_COMPILATION_UNIT} STREQUAL "SHARED_LIBRARY")
        add_library(${CREATE_MODULE_NAME} SHARED ${CREATE_MODULE_SOURCES} ${CREATE_MODULE_HEADERS})
    elseif(${CREATE_MODULE_COMPILATION_UNIT} STREQUAL "STATIC_LIBRARY")
        add_library(${CREATE_MODULE_NAME} STATIC ${CREATE_MODULE_SOURCES} ${CREATE_MODULE_HEADERS})
    elseif(${CREATE_MODULE_COMPILATION_UNIT} STREQUAL "OBJECT_LIBRARY")
        add_library(${CREATE_MODULE_NAME} OBJECT ${CREATE_MODULE_SOURCES} ${CREATE_MODULE_HEADERS})
    elseif(${CREATE_MODULE_COMPILATION_UNIT} STREQUAL "MODULE_LIBRARY")
        add_library(${CREATE_MODULE_NAME} MODULE ${CREATE_MODULE_SOURCES} ${CREATE_MODULE_HEADERS})
    else()
        message(SEND_ERROR "Unspecified or unsupported compilation unit type.")
    endif()

    set_target_properties(${CREATE_MODULE_NAME} PROPERTIES PUBLIC_HEADER "${CREATE_MODULE_HEADERS}")

    install(TARGETS ${CREATE_MODULE_NAME}
        EXPORT ${CREATE_MODULE_PACKAGE}Targets
        RUNTIME DESTINATION ${INSTALL_BIN_DIR}
        LIBRARY DESTINATION ${INSTALL_LIB_DIR}
        PUBLIC_HEADER DESTINATION ${INSTALL_INCLUDE_DIR})
endfunction()

function(create_exports)
    set(_OPTIONS CUSTOM_CONFIGS)
    set(_ONE_VALUE_ARGS PACKAGE VERSION)
    set(_MULTI_VALUE_ARGS LIBRARIES)
    cmake_parse_arguments(CREATE_EXPORTS "${_OPTIONS}" "${_ONE_VALUE_ARGS}" "${_MULTI_VALUE_ARGS}" ${ARGN})

    set(CONF_PACKAGE_NAME ${CREATE_EXPORTS_PACKAGE})
    string(TOUPPER ${CONF_PACKAGE_NAME} CONF_PACKAGE_NAME_UPPERCASE)
    set(CONF_EXPORTED_LIBRARIES "${CREATE_EXPORTS_LIBRARIES}")
    set(CONF_VERSION "${CREATE_EXPORTS_VERSION}")

    if(NOT CREATE_EXPORTS_CUSTOM_CONFIGS)
        set(CREATE_EXPORTS_CONFIG_INPUT_FILE "${PROJECT_CMAKE_DIR}/ConfigTemplate.cmake.in")
        set(CREATE_EXPORTS_VERSION_INPUT_FILE "${PROJECT_CMAKE_DIR}/ConfigVersionTemplate.cmake.in")
    else()
        set(CREATE_EXPORTS_CONFIG_INPUT_FILE "${CREATE_EXPORTS_PACKAGE}Config.cmake.in")
        set(CREATE_EXPORTS_VERSION_INPUT_FILE "${CREATE_EXPORTS_PACKAGE}ConfigVersion.cmake.in")
    endif()
    set(CREATE_EXPORTS_CONFIG_OUTPUT_FILE "${CREATE_EXPORTS_PACKAGE}Config.cmake")
    set(CREATE_EXPORTS_VERSION_OUTPUT_FILE "${CREATE_EXPORTS_PACKAGE}ConfigVersion.cmake")

    export(TARGETS ${CREATE_EXPORTS_LIBRARIES} FILE "${PROJECT_BINARY_DIR}/${CREATE_EXPORTS_PACKAGE}Targets.cmake")
    export(PACKAGE ${CREATE_EXPORTS_PACKAGE})

    file(RELATIVE_PATH REL_INCLUDE_DIR "${INSTALL_CMAKE_DIR}" "${INSTALL_INCLUDE_DIR}")
    set(CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}" "${PROJECT_BINARY_DIR}")
    configure_file(${CREATE_EXPORTS_CONFIG_INPUT_FILE} "${PROJECT_BINARY_DIR}/${CREATE_EXPORTS_CONFIG_OUTPUT_FILE}" @ONLY)

    set(CONF_INCLUDE_DIRS "\${${CONF_PACKAGE_NAME_UPPERCASE}_CMAKE_DIR}/${REL_INCLUDE_DIR}")
    configure_file(${CREATE_EXPORTS_CONFIG_INPUT_FILE} "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${CREATE_EXPORTS_CONFIG_OUTPUT_FILE}" @ONLY)

    configure_file(${CREATE_EXPORTS_VERSION_INPUT_FILE} "${PROJECT_BINARY_DIR}/${CREATE_EXPORTS_VERSION_OUTPUT_FILE}" @ONLY)

    install(FILES
            "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${CREATE_EXPORTS_CONFIG_OUTPUT_FILE}"
            "${PROJECT_BINARY_DIR}/${CREATE_EXPORTS_VERSION_OUTPUT_FILE}"
            DESTINATION "${INSTALL_CMAKE_DIR}")
    install(EXPORT ${CREATE_EXPORTS_PACKAGE}Targets DESTINATION "${INSTALL_CMAKE_DIR}")
endfunction()
